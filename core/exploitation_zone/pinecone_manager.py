from pinecone import Pinecone
import openai
import os
from dotenv import load_dotenv
from pinecone.models import ServerlessSpec

load_dotenv()


class PineconeManager:
    def __init__(self, index_name):
        # Initialize the Pinecone client
        self.pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
        self.index = self.pc.Index(index_name)

    def upsert_items(self, items: list[dict]):
        vectors = self._texts_to_vectors([item["text"] for item in items])
        metadata = [item["metadata"] for item in items]

        # Create a list of tuples (id, vector, metadata)
        upsert_data = [
            (item["id"], vector, meta)
            for item, vector, meta in zip(items, vectors, metadata)
        ]

        # Upsert the data
        self.index.upsert(upsert_data, batch_size=100)

    @classmethod
    def create_index(cls, index_name: str):
        pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
        pc.create_index(
            name=index_name,
            dimension=1536,
            metric="cosine",
            spec=ServerlessSpec(
                cloud="aws",
                region="us-east-1",
            ),
        )

    def query(self, query: str, top_k: int = 10):
        query_vector = self._texts_to_vectors([query])
        resp = self.index.query(
            vector=query_vector[0],
            top_k=top_k,
            include_metadata=True,
        )
        return resp

    def _texts_to_vectors(self, texts: list[str]) -> list[list[float]]:
        resp = openai.embeddings.create(input=texts, model="text-embedding-3-small")
        embeddings = [record.embedding for record in resp.data]
        return embeddings


if __name__ == "__main__":
    import os

    # PineconeManager.create_index("bdm-movies")
    pinecone_manager = PineconeManager(
        index_name="bdm-movies",
    )
    # items = [
    #     {"id": "1", "text": "example text", "metadata": {"key": "value"}},
    #     {"id": "2", "text": "example text 2", "metadata": {"key": "value 2"}},
    # ]
    # pinecone_manager.upsert_items(items)
    resp = pinecone_manager.query("Film religion")
    for match in resp["matches"][:3]:
        print(match["metadata"])
