services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka_net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka_net

  comments_generator:
    build:
      context: .
      dockerfile: core/landing_zone/streaming_ingestion/comments_generator/Dockerfile
    container_name: comments_generator
    ports:
      - "8000:8000"
    networks:
      - kafka_net

  producer:
    build:
      context: .
      dockerfile: core/landing_zone/streaming_ingestion/producer/Dockerfile
    container_name: kafka_producer
    depends_on:
      - kafka
      - comments_generator
    ports:
      - "8001:8001"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: comments
    volumes:
      - ./data:/app/data
    networks:
      - kafka_net
    command: [ "python3", "producer/kafka_producer.py" ]

  consumer:
    build:
      context: .
      dockerfile: core/landing_zone/streaming_ingestion/consumer/Dockerfile
    container_name: kafka_consumer
    depends_on:
      - kafka
    volumes:
      - ./data:/app/data
    networks:
      - kafka_net
    command: [ "python3", "kafka_consumer.py" ]

  kafka-client:
    image: confluentinc/cp-kafkacat:latest
    container_name: kafka_client
    entrypoint: [ "tail", "-f", "/dev/null" ]
    networks:
      - kafka_net

  airflow-webserver:
    build:
      context: .
      dockerfile: core/landing_zone/batch_ingestion/Dockerfile
    container_name: airflow_webserver
    depends_on:
      - kafka
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./core/landing_zone/batch_ingestion:/opt/airflow/dags
      - airflow_data:/opt/airflow
    ports:
      - "8080:8080"
    networks:
      - kafka_net
    command: webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: .
      dockerfile: core/landing_zone/batch_ingestion/Dockerfile.airflow
    container_name: airflow_scheduler
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./core/landing_zone/batch_ingestion:/opt/airflow/dags
      - airflow_data:/opt/airflow
    networks:
      - kafka_net
    command: scheduler

volumes:
  airflow_data:


networks:
  kafka_net:
    driver: bridge
